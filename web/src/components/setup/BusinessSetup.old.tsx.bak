/**
 * Business Setup Component
 * Handles additional profile completion for business accounts (documents and verification)
 */

import { Button } from '@/components/ui/Button'
import { useAuth } from '@/contexts/AuthContext'
import { useRouter } from 'next/router'
import React, { useState } from 'react'

const MAX_FILE_SIZE = 10 * 1024 * 1024 // 10MB
const MAX_IMAGE_SIZE = 5 * 1024 * 1024 // 5MB

const BusinessSetup: React.FC = () => {
  const router = useRouter()
  const { appUser, updateUser } = useAuth()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState(false)
  
  const [formData, setFormData] = useState<BusinessFormData>({
    businessName: (appUser as any)?.businessInfo?.businessName || '',
    taxNumber: '',
    phone: appUser?.phone || '',
    category: '',
    address: {
      type: 'business',
      formattedAddress: '',
      street: '',
      doorNumber: '',
      apartment: '',
      neighborhood: '',
      district: '',
      city: '',
      state: '',
      postalCode: '',
      zipCode: '',  // Added zipCode
      country: 'Türkiye',
      coordinates: GOOGLE_MAPS_CONFIG.defaultCenter
    },
    website: '',
    description: ''
  })

  const [addressText, setAddressText] = useState('')
  const [mapCenter, setMapCenter] = useState<ICoordinates>(
    formData.address.coordinates || GOOGLE_MAPS_CONFIG.defaultCenter
  )
  const [markerPosition, setMarkerPosition] = useState<ICoordinates | undefined>(
    formData.address.coordinates
  )

  // Document upload states
  const [taxCertificate, setTaxCertificate] = useState<File | null>(null)
  const [placePhotos, setPlacePhotos] = useState<File[]>([])
  const [uploadProgress, setUploadProgress] = useState(0)

  // Get user's current location on mount
  useEffect(() => {
    if (navigator.geolocation && !formData.address.coordinates) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const coords = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          }
          setMapCenter(coords)
          setMarkerPosition(coords)
          setFormData(prev => ({
            ...prev,
            address: { ...prev.address, coordinates: coords }
          }))
        },
        (error) => {
          console.log('Geolocation error:', error)
        }
      )
    }
  }, [])

  // Handle place selection from autocomplete
  const handlePlaceSelect = useCallback((place: google.maps.places.PlaceResult) => {
    const components = extractAddressComponents(place)
    const coordinates = getPlaceCoordinates(place)
    
    setFormData(prev => ({
      ...prev,
      address: {
        ...prev.address,
        formattedAddress: components.formatted,
        street: components.street || '',
        doorNumber: components.streetNumber,
        neighborhood: components.neighborhood,
        district: components.district,
        city: components.city || '',
        state: components.city || '',
        postalCode: components.postalCode,
        zipCode: components.postalCode || '',  // Sync zipCode with postalCode
        country: components.country || 'Türkiye',
        coordinates: coordinates || prev.address.coordinates
      }
    }))
    
    if (coordinates) {
      setMapCenter(coordinates)
      setMarkerPosition(coordinates)
    }
    
    setAddressText(components.formatted)
  }, [])

  // Handle marker drag on map
  const handleMarkerDragEnd = useCallback((position: ICoordinates) => {
    setMarkerPosition(position)
    setFormData(prev => ({
      ...prev,
      address: { ...prev.address, coordinates: position }
    }))
  }, [])

  // Handle address change from map
  const handleAddressChangeFromMap = useCallback((place: google.maps.places.PlaceResult | null) => {
    if (place) {
      const components = extractAddressComponents(place)
      setFormData(prev => ({
        ...prev,
        address: {
          ...prev.address,
          formattedAddress: components.formatted,
          street: components.street,
          doorNumber: components.streetNumber,
          neighborhood: components.neighborhood,
          district: components.district,
          city: components.city,
          state: components.city,
          postalCode: components.postalCode
        }
      }))
      setAddressText(components.formatted)
    }
  }, [])

  // Handle input changes
  const handleInputChange = (field: keyof BusinessFormData | string, value: string) => {
    if (field.includes('.')) {
      const [parent, child] = field.split('.')
      setFormData(prev => ({
        ...prev,
        [parent]: {
          ...(prev as any)[parent],
          [child]: value
        }
      }))
    } else {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }))
    }
  }

  // Handle tax certificate selection
  const handleTaxCertificateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      if (file.size > MAX_FILE_SIZE) {
        setError('Vergi levhası dosyası 10MB\'dan küçük olmalıdır')
        return
      }
      if (file.type !== 'application/pdf') {
        setError('Vergi levhası PDF formatında olmalıdır')
        return
      }
      setTaxCertificate(file)
      setError('')
    }
  }

  // Handle place photos selection
  const handlePlacePhotosChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || [])
    const validFiles = files.filter(file => {
      if (file.size > MAX_IMAGE_SIZE) {
        setError('Fotoğraflar 5MB\'dan küçük olmalıdır')
        return false
      }
      if (!file.type.startsWith('image/')) {
        setError('Sadece resim dosyaları yüklenebilir')
        return false
      }
      return true
    })
    
    if (validFiles.length > 5) {
      setError('En fazla 5 fotoğraf yükleyebilirsiniz')
      return
    }
    
    setPlacePhotos(validFiles)
    setError('')
  }

  // Validate step 1
  const validateBusinessInfo = (): boolean => {
    if (!formData.businessName.trim()) {
      setError('Lütfen işletme adını girin')
      return false
    }
    if (!formData.taxNumber.trim()) {
      setError('Lütfen vergi numarasını girin')
      return false
    }
    if (!formData.phone.trim()) {
      setError('Lütfen telefon numarasını girin')
      return false
    }
    if (!formData.category) {
      setError('Lütfen bir kategori seçin')
      return false
    }
    return true
  }

  // Validate step 2
  const validateAddress = (): boolean => {
    if (!formData.address.coordinates) {
      setError('Lütfen haritadan konumunuzu seçin')
      return false
    }
    if (!formData.address.city) {
      setError('Lütfen şehir bilgisini girin')
      return false
    }
    return true
  }

  // Handle next step
  const handleNextStep = () => {
    setError('')
    if (step === 1 && validateBusinessInfo()) {
      setStep(2)
    } else if (step === 2 && validateAddress()) {
      setStep(3)
    }
  }

  // Handle previous step
  const handlePrevStep = () => {
    setError('')
    setStep(step - 1)
  }

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')
    setLoading(true)
    
    try {
      // Create form data for file upload
      const uploadData = new FormData()
      
      // Add business data
      uploadData.append('businessData', JSON.stringify({
        businessName: formData.businessName,
        taxNumber: formData.taxNumber,
        phone: formData.phone,
        category: formData.category,
        address: formData.address,
        website: formData.website,
        description: formData.description,
        isProfileComplete: true
      }))
      
      // Add documents if provided
      if (taxCertificate) {
        uploadData.append('taxCertificate', taxCertificate)
      }
      placePhotos.forEach((photo, index) => {
        uploadData.append(`placePhoto_${index}`, photo)
      })
      
      // Update user profile
      // Note: In real implementation, this would upload files to storage first
      // Cast to any to allow our extended properties (businessInfo)
      await updateUser({
        phone: formData.phone,
        address: formData.address,  // This is personal/home address for individual users
        isProfileComplete: true,
        // Store business-specific data as a nested object
        // Firestore will accept this even though it's not in the base IAppUser type
        ...{
          businessInfo: {
            businessName: formData.businessName,
            taxNumber: formData.taxNumber,
            category: formData.category,
            website: formData.website,
            description: formData.description,
            businessAddress: formData.address, // Business address stored in businessInfo
            hasDocuments: !!taxCertificate || placePhotos.length > 0,
            isCertified: false  // Will be set to true after document verification
          }
        }
      } as any)
      
      setSuccess(true)
      
      // Redirect to home after success
      setTimeout(() => {
        router.push('/home')
      }, 2000)
    } catch (err: any) {
      setError(err.message || 'Profil güncellenirken bir hata oluştu')
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto max-w-4xl px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            İşletme Profilinizi Tamamlayın
          </h1>
          <p className="text-gray-600">
            İşletmenizin bilgilerini ekleyerek müşterilerinize ulaşın
          </p>
        </div>

        {/* Progress Steps */}
        <div className="flex items-center justify-center mb-8">
          <div className="flex items-center">
            <div className={`flex items-center justify-center w-10 h-10 rounded-full 
              ${step >= 1 ? 'bg-blue-600 text-white' : 'bg-gray-300 text-gray-600'}`}>
              1
            </div>
            <div className={`w-20 h-1 mx-2 ${step >= 2 ? 'bg-blue-600' : 'bg-gray-300'}`} />
            <div className={`flex items-center justify-center w-10 h-10 rounded-full 
              ${step >= 2 ? 'bg-blue-600 text-white' : 'bg-gray-300 text-gray-600'}`}>
              2
            </div>
            <div className={`w-20 h-1 mx-2 ${step >= 3 ? 'bg-blue-600' : 'bg-gray-300'}`} />
            <div className={`flex items-center justify-center w-10 h-10 rounded-full 
              ${step >= 3 ? 'bg-blue-600 text-white' : 'bg-gray-300 text-gray-600'}`}>
              3
            </div>
          </div>
        </div>

        {/* Step Labels */}
        <div className="flex justify-center mb-8">
          <div className="flex items-center space-x-4 md:space-x-8">
            <span className={`text-sm ${step === 1 ? 'text-blue-600 font-semibold' : 'text-gray-500'}`}>
              İşletme Bilgileri
            </span>
            <span className={`text-sm ${step === 2 ? 'text-blue-600 font-semibold' : 'text-gray-500'}`}>
              Adres
            </span>
            <span className={`text-sm ${step === 3 ? 'text-blue-600 font-semibold' : 'text-gray-500'}`}>
              Belgeler
            </span>
          </div>
        </div>

        {/* Success Message */}
        {success && (
          <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg mb-6">
            Profiliniz başarıyla güncellendi! Ana sayfaya yönlendiriliyorsunuz...
          </div>
        )}

        {/* Error Message */}
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6">
            {error}
          </div>
        )}

        {/* Form */}
        <form onSubmit={handleSubmit} className="bg-white rounded-lg shadow-md p-6">
          {/* Step 1: Business Information */}
          {step === 1 && (
            <div className="space-y-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">
                İşletme Bilgileri
              </h2>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  İşletme Adı *
                </label>
                <Input
                  type="text"
                  value={formData.businessName}
                  onChange={(e) => handleInputChange('businessName', e.target.value)}
                  placeholder="İşletme adınız"
                  required
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Vergi Numarası *
                  </label>
                  <Input
                    type="text"
                    value={formData.taxNumber}
                    onChange={(e) => handleInputChange('taxNumber', e.target.value)}
                    placeholder="Vergi numaranız"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Telefon Numarası *
                  </label>
                  <Input
                    type="tel"
                    value={formData.phone}
                    onChange={(e) => handleInputChange('phone', e.target.value)}
                    placeholder="5XX XXX XX XX"
                    required
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Kategori *
                </label>
                <select
                  value={formData.category}
                  onChange={(e) => handleInputChange('category', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                >
                  <option value="">Kategori seçin</option>
                  {BUSINESS_CATEGORIES.map(cat => (
                    <option key={cat.id} value={cat.id}>
                      {cat.icon} {cat.label}
                    </option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Web Sitesi
                </label>
                <Input
                  type="url"
                  value={formData.website}
                  onChange={(e) => handleInputChange('website', e.target.value)}
                  placeholder="https://www.example.com"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  İşletme Açıklaması
                </label>
                <textarea
                  value={formData.description}
                  onChange={(e) => handleInputChange('description', e.target.value)}
                  placeholder="İşletmeniz hakkında kısa bir açıklama"
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div className="flex justify-end">
                <Button
                  type="button"
                  onClick={handleNextStep}
                  className="px-6"
                >
                  İleri
                </Button>
              </div>
            </div>
          )}

          {/* Step 2: Address Information */}
          {step === 2 && (
            <div className="space-y-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">
                İşletme Adresi
              </h2>
              
              {/* Address Autocomplete */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Adres Ara
                </label>
                <GoogleAddressAutocomplete
                  value={addressText}
                  onChange={setAddressText}
                  onPlaceSelect={handlePlaceSelect}
                  placeholder="İşletme adresinizi arayın"
                />
              </div>
              
              {/* Map */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Haritadan İşletme Konumunu Seçin
                </label>
                <GoogleMapWithMarker
                  center={mapCenter}
                  markerPosition={markerPosition}
                  draggable={true}
                  onMarkerDragEnd={handleMarkerDragEnd}
                  onAddressChange={handleAddressChangeFromMap}
                  height="400px"
                  className="rounded-lg overflow-hidden"
                />
                <p className="text-xs text-gray-500 mt-2">
                  İşaretçiyi sürükleyerek konumu ayarlayabilirsiniz
                </p>
              </div>
              
              {/* Address Details */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    İl *
                  </label>
                  <Input
                    type="text"
                    value={formData.address.city}
                    onChange={(e) => handleInputChange('address.city', e.target.value)}
                    placeholder="İl"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    İlçe
                  </label>
                  <Input
                    type="text"
                    value={formData.address.district}
                    onChange={(e) => handleInputChange('address.district', e.target.value)}
                    placeholder="İlçe"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Mahalle
                  </label>
                  <Input
                    type="text"
                    value={formData.address.neighborhood}
                    onChange={(e) => handleInputChange('address.neighborhood', e.target.value)}
                    placeholder="Mahalle"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sokak/Cadde
                  </label>
                  <Input
                    type="text"
                    value={formData.address.street}
                    onChange={(e) => handleInputChange('address.street', e.target.value)}
                    placeholder="Sokak/Cadde"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Bina No
                  </label>
                  <Input
                    type="text"
                    value={formData.address.doorNumber}
                    onChange={(e) => handleInputChange('address.doorNumber', e.target.value)}
                    placeholder="Bina No"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Kat/Ofis
                  </label>
                  <Input
                    type="text"
                    value={formData.address.apartment}
                    onChange={(e) => handleInputChange('address.apartment', e.target.value)}
                    placeholder="Kat/Ofis"
                  />
                </div>
              </div>
              
              {/* Buttons */}
              <div className="flex justify-between">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handlePrevStep}
                >
                  Geri
                </Button>
                <Button
                  type="button"
                  onClick={handleNextStep}
                >
                  İleri
                </Button>
              </div>
            </div>
          )}

          {/* Step 3: Documents */}
          {step === 3 && (
            <div className="space-y-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">
                Belgeler (İsteğe Bağlı)
              </h2>
              
              <p className="text-sm text-gray-600">
                Güvenilirliğinizi artırmak için işletme belgelerinizi yükleyebilirsiniz
              </p>
              
              {/* Tax Certificate */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Vergi Levhası (PDF)
                </label>
                <input
                  type="file"
                  accept=".pdf"
                  onChange={handleTaxCertificateChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                />
                {taxCertificate && (
                  <p className="text-sm text-green-600 mt-2">
                    ✓ {taxCertificate.name} yüklendi
                  </p>
                )}
                <p className="text-xs text-gray-500 mt-1">
                  Maksimum dosya boyutu: 10MB
                </p>
              </div>
              
              {/* Place Photos */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  İşletme Fotoğrafları (Max 5)
                </label>
                <input
                  type="file"
                  accept="image/*"
                  multiple
                  onChange={handlePlacePhotosChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                />
                {placePhotos.length > 0 && (
                  <div className="mt-2">
                    <p className="text-sm text-green-600">
                      ✓ {placePhotos.length} fotoğraf yüklendi
                    </p>
                    <div className="flex flex-wrap gap-2 mt-2">
                      {placePhotos.map((photo, index) => (
                        <div key={index} className="relative">
                          <img
                            src={URL.createObjectURL(photo)}
                            alt={`İşletme ${index + 1}`}
                            className="w-20 h-20 object-cover rounded"
                          />
                          <button
                            type="button"
                            onClick={() => {
                              setPlacePhotos(prev => prev.filter((_, i) => i !== index))
                            }}
                            className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs"
                          >
                            ×
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                <p className="text-xs text-gray-500 mt-1">
                  Her fotoğraf maksimum 5MB olmalıdır
                </p>
              </div>
              
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <p className="text-sm text-blue-800">
                  <strong>Not:</strong> Belgeleriniz incelendikten sonra profilinizde 
                  "Yetkili Bayi" rozeti görüntülenecektir.
                </p>
              </div>
              
              {/* Buttons */}
              <div className="flex justify-between">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handlePrevStep}
                >
                  Geri
                </Button>
                <div className="space-x-2">
                  <Button
                    type="submit"
                    variant="outline"
                    disabled={loading}
                    onClick={(e) => {
                      // Skip documents
                      setTaxCertificate(null)
                      setPlacePhotos([])
                    }}
                  >
                    Belgesiz Devam Et
                  </Button>
                  <Button
                    type="submit"
                    disabled={loading}
                  >
                    {loading ? 'Kaydediliyor...' : 'Tamamla'}
                  </Button>
                </div>
              </div>
            </div>
          )}
        </form>
      </div>
    </div>
  )
}

export default BusinessSetup
